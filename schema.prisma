generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id          String        @id @default(cuid())
  title       String
  rank1       String
  rank2       String
  rank3       String?
  rank4       String?
  rank5       String?
  authorId    String?
  description String?
  comments    Comments[]
  author      User?          @relation(fields: [authorId], references: [id])
  metadata    Post_Metadata? 
}

model Post_Metadata {
  post_id  String   @id @map("post_id") @unique
  images   Boolean  @default(false)
  verified Boolean  @default(false)
  likes    Int?     @default(0)
  post     Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  username      String?    @unique
  image         String?
  accounts      Account[]
  comments      Comments[]
  likes         Likes[]
  posts         Post[]
  sessions      Session[]
}

model Likes {
  userId String
  postId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comments {
  id     String @id @default(cuid())
  text   String
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}
