generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
}

model Posts {
  id          String          @id @default(cuid())
  title       String
  rank1       String
  rank2       String
  rank3       String?
  rank4       String?
  rank5       String?
  authorId    String?
  username    String?
  description String?
  category    String
  private     Boolean         @default(false)
  groupId     String?
  group       Groups?         @relation(fields: [groupId], references: [id])
  comments    Comments[]
  author      User?           @relation(fields: [authorId], references: [id])
  metadata    Post_Metadata?
}

model Post_Metadata {
  postId   String   @unique
  images   Boolean  @default(false)
  likes    Int      @default(0)
  views    Int      @default(0)
  date     DateTime @default(now())
  post     Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  username      String?         @unique
  image         String?
  accounts      Account[]
  comments      Comments[]
  likes         Likes[]
  clikes        Comment_Likes[]
  posts         Posts[]
  reports       Reports[]
  memberGroups  Groups[]        @relation("GroupMembers")
  adminGroups   Groups[]        @relation("GroupAdmins")
  sessions      Session[]
}

model Reports {
  userId   String?
  report   String
  reportID String @id @default(cuid())
  user     User?   @relation(fields: [userId], references: [id])
}

model Likes {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Comment_Likes {
  userId    String
  commentId String
  user      User   @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comments {
  id       String    @id @default(cuid())
  text     String
  likes    Int       @default(0)
  date     DateTime  @default(now())
  replies  Int       @default(0)
  parentId String?
  username String?
  postId   String
  userId   String
  post     Posts     @relation(fields: [postId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
}

model Groups {
  id         String     @id @default(cuid())
  name       String
  password   String?
  invite     Boolean
  private    Boolean
  bannerimg  Boolean    
  profileimg Boolean    
  population Int        @default(1)
  members    User[]     @relation("GroupMembers")
  admins     User[]     @relation("GroupAdmins")
  posts      Posts[]
}